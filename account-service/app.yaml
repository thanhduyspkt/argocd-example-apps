---
# Source: account-service/templates/go-app.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: account-service
    app.kubernetes.io/version: f30ee9e
    helm.sh/chart: account-service-0.1.0
    tags.datadoghq.com/env: stg
    tags.datadoghq.com/service: account-service
    tags.datadoghq.com/version: rc-ce0dad6-10561784
  name: release-name-account-service
---
# Source: account-service/templates/configmap.yaml
apiVersion: v1
data:
  config.json: |-
    {
      "name": "account-service Service",
      "serviceName": "account-service",
      "host": "0.0.0.0",
      "port": 8080,
      "env": "stg",
      "ownerInfo": {
        "name": "digibank",
        "email": "digibank.tech@myteksi.com",
        "url": "digibank.myteksi.com"
      },
      "data": {
        "mysql": {
          "master": {
            "dsn": "{{as_username}}:{{as_password}}@tcp($MYSQL_HOST$:3306)/$DB_NAME$?parseTime=true&loc=UTC",
            "maxIdle": 25,
            "maxOpen": 50,
            "connMaxLifetime": "1800s"
          },
          "slave": {
            "dsn": "{{as_username}}:{{as_password}}@tcp($MYSQL_HOST_REPLICA$:3306)/$DB_NAME$?parseTime=true&loc=UTC",
            "maxIdle": 25,
            "maxOpen": 50,
            "connMaxLifetime": "1800s"
          },
          "masterCircuitBreaker": {
            "timeoutInMs": 1000,
            "tag": "type:rds.masterCircuitBreaker"
          },
          "slaveCircuitBreaker": {
            "timeoutInMs": 1000,
            "tag": "type:rds.slaveCircuitBreaker"
          }
        }
      },
      "statsd": {
        "host": "$DOGSTATSD_HOST$",
        "port": 8125
      },
      "trace": {
        "host": "$DOGSTATSD_HOST$",
        "port": 8126
      },
      "logger": {
        "syslogTag": "structuredlog.accountservice",
        "workerCount": 10,
        "bufferSize": 10000,
        "logLevel": 1,
        "stacktraceLevel": 4,
        "logFormat": "json",
        "development": true
      },
      "accountServiceConfig": {
        "productVariantCodeConfig": {
          "depositAccount": "DEPOSITS_ACCOUNT",
          "operatingAccount": "BIZ_DEPOSIT_ACCOUNT",
          "savingsPocket": "SAVINGS_POCKET"
        },
        "clientConfig": {
          "maxIdleConnsPerHost": 64,
          "idleConnTimeoutInSMillis": 10000,
          "timeoutInMillis": 4000,
          "requestLogLockTimeoutInMillis": 5000
        },
        "savingsPocketConfig": {
          "maxPocketLimit": 10
        },
        "pendingActivationThresholdInMinutes": 2880,
        "_pendingActivationThresholdInMinutes": 129600,
        "pendingFirstDepositThresholdInMinutes": 129600,
        "pendingActivationAutoCloseReminder": {
          "reminderText": ["1", "3", "5", "25", "45", "60"],
          "reminderTimeInMinutes": [2880, 2880, 2880, 36000, 64800, 86400],
          "_reminderTimeInMinutes": [1440, 4320, 7200, 36000, 64800, 86400],
          "bufferTimeInHours": 24,
          "_bufferTimeInHours": "Buffer time acts as an extension of the notification window, ensuring that notifications are sent to accounts that fall within the extended time frame. For example, if cron run at 14 Aug, when query it will add the buffer time (1 day), so the account that fall within 14 Aug and 15 Aug will received notification"
        },
        "pendingFirstDepositAutoCloseReminder": {
          "reminderText": ["1 Day", "3 Days", "5 Days", "25 Days", "45 Days", "60 Days"],
          "reminderTimeInMinutes": [1440, 4320, 7200, 36000, 64800, 86400],
          "bufferTimeInHours": 24,
          "_bufferTimeInHours": "Buffer time acts as an extension of the notification window, ensuring that notifications are sent to accounts that fall within the extended time frame. For example, if cron run at 14 Aug, when query it will add the buffer time (1 day), so the account that fall within 14 Aug and 15 Aug will received notification"
        },
        "_accountStatus": {
          "disableCloseFromHour": "16:00",
          "disableCloseFromHour.description": "The hour format should be something like 23:00 and will be parsed as UTC time",
          "disableCloseDurationSecond": 7200
        },
        "baseURL": "http://account-service.core-banking.svc.cluster.local"
      },
      "snowflakeConfig": {
        "engine": "snowflake",
        "dsn": "{{ SNOWFLAKE_USER }}:{{ SNOWFLAKE_PASSWORD }}@hq77744.ap-southeast-1.privatelink.snowflakecomputing.com/GOLD/ANALYTICS?role=bank_restricted_service_role&client_session_keep_alive=true",
        "batchSize": 100
      },
      "bankRestrictedEventKafkaConfig": {
        "brokers": [
          "b-1.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-2.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-3.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094"
        ],
        "clientID": "account-bank-restricted-event-stg",
        "clusterType": "critical",
        "enableTLL": true,
        "stream": "stg-account-bank-restricted-event",
        "packageName": "pb",
        "dtoName": "BankRestricted",
        "offsetType": "oldest",
        "maxRetryCount": 5,
        "delayInMilliSeconds": 100,
        "processingDelayInMilliSeconds": 100,
        "enabled": true
      },
      "locAccountEventKafkaConfig": {
        "brokers": [
          "b-1.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-2.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-3.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094"
        ],
        "stream": "stg-loan-core-loc-account",
        "clusterType": "critical",
        "enableTLL": true,
        "offsetType": "oldest",
        "clientID": "account-service-client-stg",
        "packageName": "pb",
        "dtoName": "LoanCoreLoc"
      },
      "accountUpdateKafkaConfig": {
        "brokers": [
          "b-1.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-2.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-3.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094"
        ],
        "clientID": "account-update-event-stg",
        "clusterType": "critical",
        "enableTLL": true,
        "stream": "stg-account-update-event",
        "packageName": "pb",
        "dtoName": "AccountStatusUpdateEvent",
        "offsetType": "oldest"
      },
      "dormantAccountEventKafkaConfig": {
        "brokers": [
          "b-1.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-2.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-3.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094"
        ],
        "clientID": "deposits-dormant-account-event-stg",
        "clusterType": "critical",
        "enableTLL": true,
        "stream": "stg-deposits-dormant-account-event",
        "packageName": "pb",
        "dtoName": "DepositsDormantAccount",
        "offsetType": "oldest"
      },
      "depositsAccountDetailEventKafkaConfig": {
        "brokers": [
          "b-1.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-2.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-3.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094"
        ],
        "clientID": "deposits-account-detail-event-stg",
        "clusterType": "critical",
        "enableTLL": true,
        "stream": "stg-deposits-account-detail-event",
        "packageName": "pb",
        "dtoName": "AccountDetail",
        "offsetType": "oldest"
      },
      "depositsPostingBatchEventKafkaConfig": {
        "brokers": [
          "b-1.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-2.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-3.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094"
        ],
        "clientID": "account-service-deposits-posting-event-stg",
        "clusterType": "critical",
        "enableTLL": true,
        "stream": "stg-deposits-core-tx",
        "packageName": "pb",
        "dtoName": "DepositsCoreTx",
        "offsetType": "oldest"
      },
      "pocketLifecycleEventKafkaConfig" : {
        "brokers": [
          "b-1.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-2.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-3.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094"
        ],
        "clientID": "account-service-client-stg",
        "clusterType": "critical",
        "enableTLL": true,
        "stream": "stg-pocket-lifecycle-event",
        "packageName": "pb",
        "dtoName": "PocketLifecycle",
        "offsetType": "oldest"
      },
      "customerJournalEventKafkaConfig": {
        "brokers": [
          "b-1.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-2.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-3.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094"
        ],
        "clientID": "account-service-client-stg",
        "clusterType": "critical",
        "enableTLL": true,
        "stream": "stg-audit-log",
        "packageName": "pb",
        "dtoName": "AuditLog",
        "offsetType": "oldest"
      },
      "accountPendingActionKafkaConfig": {
        "brokers": [
          "b-1.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-2.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-3.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094"
        ],
        "clientID": "account-service-client-stg",
        "clusterType": "critical",
        "enableTLL": true,
        "stream": "stg-account-pending-action-event",
        "packageName": "pb",
        "dtoName": "AccountPendingAction",
        "offsetType": "oldest"
      },
      "depositsAccountCreationEventKafkaConfig": {
        "brokers": [
          "b-1.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-2.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-3.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094"
        ],
        "clientID": "deposits-account-creation-event-stg",
        "clusterType": "critical",
        "enableTLL": true,
        "stream": "stg-deposits-account-creation-event",
        "packageName": "pb",
        "dtoName": "DepositsAccountCreateEvent",
        "offsetType": "oldest",
        "maxRetryCount": 5,
        "delayInMilliSeconds": 100,
        "enabled": true
      },
      "depositsAccountCreatedEventKafkaConfig": {
        "brokers": [
          "b-1.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-2.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-3.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094"
        ],
        "clientID": "deposits-account-created-event-stg",
        "clusterType": "critical",
        "enableTLL": true,
        "stream": "stg-deposits-account-created-event",
        "packageName": "pb",
        "dtoName": "DepositsAccountCreateEvent",
        "syncprod": true,
        "requiredAcks": -1,
        "enabled": true
      },
      "depositsAccountStatusUpdateEventKafkaConfig": {
        "brokers": [
          "b-1.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-2.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094",
          "b-3.msk05msk.2hhvef.c3.kafka.ap-southeast-1.amazonaws.com:9094"
        ],
        "clientID": "account-status-update-event-stg",
        "clusterType": "critical",
        "enableTLL": true,
        "stream": "stg-deposits-core-account-status-update-event",
        "packageName": "pb",
        "dtoName": "DepositsAccountStatusUpdateEvent",
        "offsetType": "oldest",
        "maxRetryCount": 5,
        "delayInMilliSeconds": 100,
        "enable": true
      },
      "depositsCoreConfig": {
        "baseURL": "http://deposits-core.core-banking.svc.cluster.local"
      },
      "depositsExpConfig": {
        "baseURL": "http://deposits-exp.core-banking.svc.cluster.local"
      },
      "customerMasterConfig": {
        "baseURL": "http://customer-master.onboarding.svc.cluster.local"
      },
      "goalCoreConfig": {
        "baseURL": "http://goal-core.core-banking.svc.cluster.local",
        "maxGoalAmountInCent": 999999999
      },
      "productMasterConfig": {
        "baseURL": "http://product-master.core-banking.svc.cluster.local"
      },
      "hermesConfig": {
        "baseURL": "http://hermes.hermes.svc.cluster.local"
      },
      "pigeonConfig": {
        "baseURL": "http://pigeon.pigeon.svc.cluster.local"
      },
      "loanCoreConfig": {
        "baseURL": "http://loan-core.lending-platform.svc.cluster.local"
      },
      "appian": {
        "hostAddress": "https://dbmytest.gforce.g-bank.app",
        "clientID": "account-service",
        "circuitConfig": {
          "appian": {
            "timeout": 15
          }
        },
        "registeredClientID" : "{{APPIAN_CLIENT_ID}}",
        "registeredClientSecret" : "{{APPIAN_CLIENT_SECRET}}",
        "grantType": "client_credentials",
        "limitCreationCallbackEndpoint" : "/suite/webapi/lending/event/limit-creation"
      },
      "workflowRetryConfig": {
        "enabled": true,
        "createCASAAccountV3": {
          "transactional": {
            "intervalInSeconds": 30,
            "maxAttempt": 10
          }
        },
        "createLOCAccount": {
          "transactional": {
            "intervalInSeconds": 30,
            "maxAttempt": 10
          },
          "auxiliary": {
            "intervalInSeconds": 30,
            "maxAttempt": 5
          }
        },
        "deactivateLOCAccount": {
          "auxiliary": {
            "intervalInSeconds": 30,
            "maxAttempt": 10
          }
        },
        "closeLOCAccount": {
          "transactional": {
            "intervalInSeconds": 30,
            "maxAttempt": 10
          }
        },
        "updateCASAAccountStatusV2": {
          "transactional": {
            "intervalInSeconds": 30,
            "maxAttempt": 10
          }
        }
      },
      "featureFlags": {
        "enableR2": true,
        "enableNewFVInGoalEstimation": true,
        "enableClientCloseConnHandling": true,
        "_enableClientCloseConnHandling": "this is a release feature flag, it should be clean up after release",
        "enableAccountPendingActionPublisher": true,
        "_enableAccountPendingActionPublisher": "this is a release feature flag, it should be clean up after release",
        "enableRemoveSchedulerInAsync": false,
        "_enableRemoveSchedulerInAsync": "this is a release feature flag to enable the remove scheduler flow in async way, it should be clean up after release",
        "enableReplicaRead": true,
        "enableLending": true,
        "enableAsyncAccountClosure": true,
        "enableAsyncAccountCreation": true
      },
      "tenant": "MY",
      "locale": {
        "currency" : "MYR",
        "countryCode": "MY"
      },
      "workerConfig": {
        "closePendingActivationAccountConf": {
          "lockDurationInMinutes": 60,
          "cronExpression": "30 18 * * *",
          "enabled": true,
          "_enabled": false
        },
        "closePendingFirstDepositAccountConf": {
          "lockDurationInMinutes": 60,
          "cronExpression": "0 19 * * *",
          "enabled": false
        },
        "pendingActivationAutoCloseReminderNotificationConf": {
          "lockDurationInMinutes": 200,
          "cronExpression": "0 11 * * *",
          "_cronExpression": "0 3 * * *",
          "enabled": true,
          "rateLimitMilliSecond": 150
        },
        "pendingFirstDepositAutoCloseReminderNotificationConf": {
          "lockDurationInMinutes": 200,
          "cronExpression": "0 3 * * *",
          "enabled": false,
          "rateLimitMilliSecond": 150
        }
      },
      "redisConfig": {
        "addr": "clustercfg.dbmy-stg-cb-ec-account-service.esalbp.apse1.cache.amazonaws.com:6379",
        "idleTimeoutInSec": 1,
        "poolSize": 300,
        "readOnlyFromSlaves": false,
        "readTimeoutInSec": 1,
        "writeTimeoutInSec": 1,
        "password": "{{ REDIS_PASSWORD }}",
        "tlsEnabled": true
      },
      "notificationConfig": {
        "holdcodeAccountBlockNotification": {
          "PushTemplate": "",
          "EmailTemplate": "holdcode_email_block_account"
        },
        "holdcodeAccountLockNotification": {
          "PushTemplate": "",
          "EmailTemplate": "holdcode_email_lock_account"
        },
        "holdcodeAccountUnblockNotification": {
          "PushTemplate": "holdcode_push_unblock_account",
          "EmailTemplate": "holdcode_email_unblock_account"
        },
        "holdcodeAccountUnlockNotification": {
          "PushTemplate": "holdcode_push_unlock_account",
          "EmailTemplate": "holdcode_email_unlock_account"
        },
        "savingsPocketClosureNotification": {
          "PushTemplate": "",
          "EmailTemplate": "",
          "_note": "Notification for pocket open and closed is currently disabled hence empty template value"
        },
        "savingsPocketCreationNotification": {
          "PushTemplate": "",
          "EmailTemplate": "",
          "_note": "Notification for pocket open and closed is currently disabled hence empty template value"
        },
        "pendingActivationAutoCloseReminderNotification": {
          "PushTemplate": "pending_activation_auto_close_reminder_push",
          "EmailTemplate": "pending_first_fund_auto_close_reminder_email"
        },
        "pendingFirstFundAutoCloseReminderNotification": {
          "PushTemplate": "pending_action_auto_close_reminder_push",
          "EmailTemplate": "pending_first_fund_auto_close_reminder_email"
        },
        "holdCodeBankRestrictedBlockAccountNotification": {
          "PushTemplate": "holdcode_push_bank_restricted_block_account",
          "EmailTemplate": "holdcode_email_bank_restricted_block_account"
        },
        "holdCodeBankRestrictedUnblockAccountNotification": {
          "PushTemplate": "holdcode_push_bank_restricted_unblock_account",
          "EmailTemplate": "holdcode_email_bank_restricted_unblock_account"
        }
      }
    }
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: account-service
    app.kubernetes.io/version: f30ee9e
    helm.sh/chart: account-service-0.1.0
    tags.datadoghq.com/env: stg
    tags.datadoghq.com/service: account-service
    tags.datadoghq.com/version: rc-ce0dad6-10561784
  name: account-service-release-name
---
# Source: account-service/templates/go-app.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: account-service
    app.kubernetes.io/version: f30ee9e
    helm.sh/chart: account-service-0.1.0
    tags.datadoghq.com/env: stg
    tags.datadoghq.com/service: account-service
    tags.datadoghq.com/version: rc-ce0dad6-10561784
  name: release-name-account-service
spec:
  ports:
  - appProtocol: http
    name: http-account-service
    nodePort: null
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: account-service
  type: ClusterIP
---
# Source: account-service/templates/go-app.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: account-service
    app.kubernetes.io/version: f30ee9e
    helm.sh/chart: account-service-0.1.0
    tags.datadoghq.com/env: stg
    tags.datadoghq.com/service: account-service
    tags.datadoghq.com/version: rc-ce0dad6-10561784
  name: release-name-account-service
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: account-service
  template:
    metadata:
      annotations:
        apm.datadoghq.com/env: '{ "DD_SERVICE": "release-name-account-service" }'
        checksum/config: 8a5ec8596ac0232284140c572da272b254777326ae3bac3195a9c62d229f5a6b
        vault.hashicorp.com/agent-cache-enable: "true"
        vault.hashicorp.com/agent-init-first: "true"
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/agent-inject-secret-account_service_appian_creds.json: kv2/data/core-experience/app/account-service/appian/client-credentials
        vault.hashicorp.com/agent-inject-secret-account_service_db_creds.json: database/creds/stg-cb-accountservice-rds-mysql-dba
        vault.hashicorp.com/agent-inject-secret-redis_creds.json: kv/data/security/tf/stg/account-service/ec/auth
        vault.hashicorp.com/agent-inject-template-account_service_appian_creds.json: |
          {{ with secret "kv2/data/core-experience/app/account-service/appian/client-credentials" -}}
            {
              "APPIAN_CLIENT_ID": "{{ .Data.data.client_id }}",
              "APPIAN_CLIENT_SECRET": "{{ .Data.data.client_secret }}"
            }
          {{- end }}
        vault.hashicorp.com/agent-inject-template-account_service_db_creds.json: |
          {{ with secret "database/creds/stg-cb-accountservice-rds-mysql-dba" -}}
            {
              "as_username": "{{ .Data.username }}",
              "as_password": "{{ .Data.password }}"
            }
          {{- end }}
        vault.hashicorp.com/agent-inject-template-redis_creds.json: |
          {{ with secret "kv/data/security/tf/stg/account-service/ec/auth" -}}
            {
              "REDIS_PASSWORD": "{{ .Data.auth_token }}"
            }
          {{- end }}
        vault.hashicorp.com/role: account-service
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/name: account-service
        tags.datadoghq.com/env: stg
        tags.datadoghq.com/service: account-service
        tags.datadoghq.com/version: rc-ce0dad6-10561784
    spec:
      containers:
      - env:
        - name: DOGSTATSD_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_ENTITY_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.uid
        - name: DD_ENV
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/env']
        - name: DD_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/service']
        - name: DD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/version']
        - name: DB_NAME
          value: account_service_stg
        - name: MYSQL_HOST
          value: stg-cb-accountservice-rds-mysql.cvzqcc7o7v2n.ap-southeast-1.rds.amazonaws.com
        - name: MYSQL_HOST_REPLICA
          value: stg-cb-accountservice-rds-mysql-replica.cvzqcc7o7v2n.ap-southeast-1.rds.amazonaws.com
        - name: SECRET_CONF
          value: /vault/secrets/
        - name: SERVICE_CONF
          value: /config_files/config.json
        image: 712221657655.dkr.ecr.ap-southeast-1.amazonaws.com/account-service:rc-ce0dad6-10561784
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /health_check
            port: 8080
        name: account-service
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /health_check
            port: 8080
        resources:
          limits:
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
        securityContext: {}
        volumeMounts:
        - mountPath: /config_files
          name: config-volume
      initContainers: null
      nodeSelector: null
      securityContext:
        fsGroup: 65532
        runAsGroup: 65532
        runAsNonRoot: true
        runAsUser: 65532
      serviceAccountName: release-name-account-service
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/name: account-service
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      volumes:
      - configMap:
          name: account-service-release-name
        name: config-volume
---
# Source: account-service/templates/go-job-consumer.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: bank-restricted-consumer
spec:
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      parallelism: 1
      template:
        metadata:
          annotations:
            checksum/config: 8a5ec8596ac0232284140c572da272b254777326ae3bac3195a9c62d229f5a6b
            vault.hashicorp.com/agent-cache-enable: "true"
            vault.hashicorp.com/agent-enable-quit: "true"
            vault.hashicorp.com/agent-init-first: "true"
            vault.hashicorp.com/agent-inject: "true"
            vault.hashicorp.com/agent-inject-secret-account_service_appian_creds.json: kv2/data/core-experience/app/account-service/appian/client-credentials
            vault.hashicorp.com/agent-inject-secret-account_service_db_creds.json: database/creds/stg-cb-accountservice-rds-mysql-dba
            vault.hashicorp.com/agent-inject-secret-redis_creds.json: kv/data/security/tf/stg/account-service/ec/auth
            vault.hashicorp.com/agent-inject-template-account_service_appian_creds.json: |
              {{ with secret "kv2/data/core-experience/app/account-service/appian/client-credentials" -}}
                {
                  "APPIAN_CLIENT_ID": "{{ .Data.data.client_id }}",
                  "APPIAN_CLIENT_SECRET": "{{ .Data.data.client_secret }}"
                }
              {{- end }}
            vault.hashicorp.com/agent-inject-template-account_service_db_creds.json: |
              {{ with secret "database/creds/stg-cb-accountservice-rds-mysql-dba" -}}
                {
                  "as_username": "{{ .Data.username }}",
                  "as_password": "{{ .Data.password }}"
                }
              {{- end }}
            vault.hashicorp.com/agent-inject-template-redis_creds.json: |
              {{ with secret "kv/data/security/tf/stg/account-service/ec/auth" -}}
                {
                  "REDIS_PASSWORD": "{{ .Data.auth_token }}"
                }
              {{- end }}
            vault.hashicorp.com/role: account-service
          labels:
            app.kubernetes.io/instance: release-name
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: account-service-cronjob
            app.kubernetes.io/version: f30ee9e
            helm.sh/chart: account-service-0.1.0
            tags.datadoghq.com/env: stg
            tags.datadoghq.com/service: account-service
            tags.datadoghq.com/version: rc-ce0dad6-10561784
        spec:
          containers:
          - env:
            - name: DOGSTATSD_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_ENTITY_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: DB_NAME
              value: account_service_stg
            - name: MYSQL_HOST
              value: stg-cb-accountservice-rds-mysql.cvzqcc7o7v2n.ap-southeast-1.rds.amazonaws.com
            - name: MYSQL_HOST_REPLICA
              value: stg-cb-accountservice-rds-mysql-replica.cvzqcc7o7v2n.ap-southeast-1.rds.amazonaws.com
            - name: SECRET_CONF
              value: /vault/secrets/
            - name: SERVICE_CONF
              value: /config_files/config.json
            - name: CONSUMER_ENABLED
              value: "true"
            - name: MANUAL_QUIT_ISTIO
              value: "true"
            - name: MANUAL_QUIT_VAULT
              value: "true"
            image: 712221657655.dkr.ecr.ap-southeast-1.amazonaws.com/account-service:rc-ce0dad6-10561784
            imagePullPolicy: Always
            name: account-service
            resources:
              limits:
                cpu: 2000m
                memory: 1Gi
              requests:
                cpu: 50m
                memory: 64Mi
            securityContext: {}
            volumeMounts:
            - mountPath: /config_files
              name: config-volume
          restartPolicy: OnFailure
          securityContext:
            fsGroup: 65532
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          serviceAccountName: release-name-account-service
          volumes:
          - configMap:
              name: account-service-release-name
            name: config-volume
      ttlSecondsAfterFinished: 1800
  schedule: 0 22 * * *
  suspend: false
---
# Source: account-service/templates/go-job-publisher.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: bank-restricted-publisher
spec:
  concurrencyPolicy: Replace
  jobTemplate:
    spec:
      template:
        metadata:
          annotations:
            checksum/config: 8a5ec8596ac0232284140c572da272b254777326ae3bac3195a9c62d229f5a6b
            vault.hashicorp.com/agent-cache-enable: "true"
            vault.hashicorp.com/agent-enable-quit: "true"
            vault.hashicorp.com/agent-init-first: "true"
            vault.hashicorp.com/agent-inject: "true"
            vault.hashicorp.com/agent-inject-secret-account_service_appian_creds.json: kv2/data/core-experience/app/account-service/appian/client-credentials
            vault.hashicorp.com/agent-inject-secret-account_service_db_creds.json: database/creds/stg-cb-accountservice-rds-mysql-dba
            vault.hashicorp.com/agent-inject-secret-redis_creds.json: kv/data/security/tf/stg/account-service/ec/auth
            vault.hashicorp.com/agent-inject-secret-snowflake_db_creds.json: database/static-creds/stg-data-backend-bank-restricted-service-ro
            vault.hashicorp.com/agent-inject-template-account_service_appian_creds.json: |
              {{ with secret "kv2/data/core-experience/app/account-service/appian/client-credentials" -}}
                {
                  "APPIAN_CLIENT_ID": "{{ .Data.data.client_id }}",
                  "APPIAN_CLIENT_SECRET": "{{ .Data.data.client_secret }}"
                }
              {{- end }}
            vault.hashicorp.com/agent-inject-template-account_service_db_creds.json: |
              {{ with secret "database/creds/stg-cb-accountservice-rds-mysql-dba" -}}
                {
                  "as_username": "{{ .Data.username }}",
                  "as_password": "{{ .Data.password }}"
                }
              {{- end }}
            vault.hashicorp.com/agent-inject-template-redis_creds.json: |
              {{ with secret "kv/data/security/tf/stg/account-service/ec/auth" -}}
                {
                  "REDIS_PASSWORD": "{{ .Data.auth_token }}"
                }
              {{- end }}
            vault.hashicorp.com/agent-inject-template-snowflake_db_creds.json: |
              {{ with secret "database/static-creds/stg-data-backend-bank-restricted-service-ro" -}}
                {
                  "SNOWFLAKE_USER": "{{ .Data.username }}",
                  "SNOWFLAKE_PASSWORD": "{{ .Data.password }}"
                }
              {{- end }}
            vault.hashicorp.com/role: account-service
          labels:
            app.kubernetes.io/instance: release-name
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: account-service-cronjob
            app.kubernetes.io/version: f30ee9e
            helm.sh/chart: account-service-0.1.0
            tags.datadoghq.com/env: stg
            tags.datadoghq.com/service: account-service
            tags.datadoghq.com/version: rc-ce0dad6-10561784
        spec:
          containers:
          - env:
            - name: DOGSTATSD_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_ENTITY_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: DB_NAME
              value: account_service_stg
            - name: MYSQL_HOST
              value: stg-cb-accountservice-rds-mysql.cvzqcc7o7v2n.ap-southeast-1.rds.amazonaws.com
            - name: MYSQL_HOST_REPLICA
              value: stg-cb-accountservice-rds-mysql-replica.cvzqcc7o7v2n.ap-southeast-1.rds.amazonaws.com
            - name: SECRET_CONF
              value: /vault/secrets/
            - name: SERVICE_CONF
              value: /config_files/config.json
            - name: PUBLISHER_ENABLED
              value: "true"
            - name: MANUAL_QUIT_ISTIO
              value: "true"
            - name: MANUAL_QUIT_VAULT
              value: "true"
            image: 712221657655.dkr.ecr.ap-southeast-1.amazonaws.com/account-service:rc-ce0dad6-10561784
            imagePullPolicy: Always
            name: account-service
            resources:
              limits:
                cpu: 2000m
                memory: 1Gi
              requests:
                cpu: 50m
                memory: 64Mi
            securityContext: {}
            volumeMounts:
            - mountPath: /config_files
              name: config-volume
          restartPolicy: OnFailure
          securityContext:
            fsGroup: 65532
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          serviceAccountName: release-name-account-service
          volumes:
          - configMap:
              name: account-service-release-name
            name: config-volume
      ttlSecondsAfterFinished: 1800
  schedule: 0 22 * * *
  suspend: false
---
# Source: account-service/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-account-service-test-connection"
  labels:
    helm.sh/chart: account-service-0.1.0
    app.kubernetes.io/name: account-service
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "f30ee9e"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: 303083450960.dkr.ecr.ap-southeast-3.amazonaws.com/public-images:busybox-1.33.1
      command: ['wget']
      args: ['release-name-account-service:80']
  restartPolicy: Never
